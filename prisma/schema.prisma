// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @unique @default(autoincrement())
  email        String         @unique
  nickname     String         @unique
  password     String
  refreshToken String?
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  point        Int            @default(0)
  drawtime     DateTime       @default(now())
  card         Card[]
  notification Notification[]
  shop         Shop[]
  favoriteShop Shop[]         @relation("favorite")
  purchase     Purchase[]
  exchange     Exchange[]
  isdeleted    Boolean        @default(false)
}

model Card {
  id             Int        @id @default(autoincrement()) // 카드ID, 기본 키
  name           String // 카드 이름
  price          Int // 카드 가격
  grade          String // 카드 등급
  genre          String // 카드 장르
  description    String // 카드 설명
  totalCount     Int // 카드 총 수 -> 최초의 발행한 카드의 수
  remainingCount Int // 현재 남아있는 카드 개수
  imageURL       String // 카드 이미지 URL
  createAt       DateTime   @default(now()) // 카드 생성 시점
  updateAt       DateTime   @updatedAt // 카드 수정 시점
  user           User       @relation(fields: [userId], references: [id], onDelete: Restrict) // 카드 소유자 (유저 ID, 외래 키)
  userId         Int // 카드 소유자 (유저 ID, 외래 키)
  shop           Shop[]
  purchase       Purchase[]
  exchange       Exchange[] @relation("CardExchanges") //교환 신청자의 카드
}

model Notification {
  id       Int      @id @default(autoincrement())
  content  String // 내용
  type     String // 알림 유형 
  read     Boolean  @default(false) // 읽었는지 여부
  createAt DateTime @default(now()) // 알림 생성 시점
  updateAt DateTime @updatedAt // 알림 수정 시점
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}

model Shop {
  id             Int        @id @default(autoincrement()) // 카드ID, 기본 키
  createAt       DateTime   @default(now()) // 카드 생성 시점
  updateAt       DateTime   @updatedAt // 카드 수정 시점
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  card           Card       @relation(fields: [cardId], references: [id])
  cardId         Int
  favorited      User[]     @relation("favorite") // 관심카드를 위한 다대다 관계 -> 정규 요구사항 아님
  price          Int
  totalCount     Int // 최초의 판매 등록 수
  remainingCount Int // 팔고 남은거 
  exchange       Exchange[]
}

model Purchase {
  id       Int      @id @default(autoincrement()) // 카드ID, 기본 키
  createAt DateTime @default(now()) // 카드 생성 시점
  updateAt DateTime @updatedAt // 카드 수정 시점
  card     Card     @relation(fields: [cardId], references: [id])
  cardId   Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
}

model Exchange {
  id       Int      @id @default(autoincrement()) // 카드ID, 기본 키
  createAt DateTime @default(now()) // 카드 생성 시점
  updateAt DateTime @updatedAt // 카드 수정 시점
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  card     Card     @relation("CardExchanges", fields: [cardId], references: [id]) //교환을 신청하는 카드 
  cardId   Int //교환을 신청하는 카드 ID 
  Shop     Shop     @relation(fields: [shopId], references: [id]) //예시 ) 구매자가 구매후 판매샵의 남아있는 카드수를 카운트 하기 위한 관계
  shopId   Int //교환의 희망하는 판매상품 
}
